syntax = "proto3";

package grpc.userProvider;

// Message for creating a new user
message CreateExpertRequest {
  string userName = 1;
  string fullName = 2;
  string password = 3;
  string confirmPassword = 4;
  string phoneNumber = 5;
  string city = 6;
  string remark = 7;

  string createBy = 8; // ID of the admin/user who created this user

  // Privileges
  bool allPrivilege = 9;
  bool addMatchPrivilege = 10;
  bool betFairMatchPrivilege = 11;
  bool bookmakerMatchPrivilege = 12;
  bool sessionMatchPrivilege = 13;
}

// Response after creating a user
message CreateExpertResponse {}

// Message for updating an expert
message UpdateExpertRequest {
  string id = 1;
  string fullName = 2;
  string phoneNumber = 3;
  string city = 4;
  string remark = 5;
  string createBy = 6;

  // Privileges
  bool allPrivilege = 7;
  bool addMatchPrivilege = 8;
  bool betFairMatchPrivilege = 9;
  bool bookmakerMatchPrivilege = 10;
  bool sessionMatchPrivilege = 11;
}

message UpdateExpertResponse {}

// Message for changing password
message ChangePasswordRequest {
  string id = 1;
  string password = 2;
  string confirmPassword = 3;
  string createBy = 4;
}

message ChangePasswordResponse {}

// Message for getting expert list 
message ExpertListRequest {
  int32 offset = 1;
  int32 limit = 2;
  string loginId = 3;
  string searchBy = 4;
  string keyword = 5;
}

message ExpertListResponse {
  string data = 1;
}

// Message for notifications
message NotificationRequest {
  string query = 1;
}

message NotificationResponse {
  string data = 1;
}

// Message for lock/unlock expert
message LockUnlockExpertRequest {
  string userId = 1;
  bool userBlock = 2;
  string blockBy = 3;
}

message LockUnlockExpertResponse {}

// Request message for checking if a user exists
message IsUserExistRequest {
  string userName = 1;
}

// Response message for checking if a user exists
message IsUserExistResponse {
  bool isExist = 1;
}

// Service for user management
service UserService {
  rpc CreateExpert(CreateExpertRequest) returns (CreateExpertResponse);
  rpc UpdateExpert(UpdateExpertRequest) returns (UpdateExpertResponse);
  rpc ChangePasswordExpert(ChangePasswordRequest) returns (ChangePasswordResponse);
  rpc GetExpertList(ExpertListRequest) returns (ExpertListResponse);
  rpc GetNotification(NotificationRequest) returns (NotificationResponse);
  rpc LockUnlockExpert(LockUnlockExpertRequest) returns (LockUnlockExpertResponse);
  rpc IsUserExist(IsUserExistRequest) returns (IsUserExistResponse);
}
